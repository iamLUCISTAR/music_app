openapi: 3.0.3
info:
  title: Music Player
  description: |-
  version: 1.0.01
  contact:
    email: bsharathofficial@gmail.com

servers:
  - url: http://localhost:5000
tags:
  - name: song
    description: Details about song api's
  - name: user
    description: Operations about user
  - name: playlist
    description: Details about playlist api's
  - name: recommendation
    description: Details about recommendation api's
paths:
  /songs/details:
    get:
      tags:
        - song
      summary: Finds song details by song id
      description: find songs
      parameters:
        - name: song_id
          in: query
          description: song id of the song
          required: false
          explode: true
          schema:
            type: string
            default: None

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'          
        '400':
          description: Invalid status value

  /songs/rating:
    post:
      tags:
        - song
      summary: Add rating for a song
      description: User can rate 1-5 for a song
      requestBody:
        description: Rating object
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                song_id:
                  type: integer
                  example: 1
                rating:
                  type: integer
                  example: 3
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: Song rated succesfully
    get:
      tags:
        - song
      summary: Returns avg rating of a song
      description: Returns avg rating of a song
      parameters:
        - name: song_id
          in: query
          description: song id of the song
          required: false
          explode: true
          schema:
            type: string
            default: None
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                      type: object
                      properties:
                        rating_info:
                          type: object
                          properties:
                            rating_avg:
                              type: number
                              example: 4.5
                            rating_count:
                              type: integer
                              example: 5
                        song_id:
                          type: integer
                          example: 1
      security:
        - api_key: []
  /songs/search:
    get:
      tags:
        - song
      summary: Search bar
      description: Search by song, artist, album, genre
      parameters:
        - name: type
          in: query
          description: song/artist/album/genre
          required: true
          schema:
            type: string
        - name: value
          in: query
          description: value for the entity
          required: true
          schema:
            type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  songs:
                    type: array
                    items:
                      $ref: '#components/schemas/Song'
                        
  /songs/playlist:
    post:
      tags:
        - song
      summary: Create a playlist for a user
      description: Create a playlist for a user
      requestBody:
        description: Playlist details
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                playlist_name:
                  type: string
                  example: rahman melodies
      responses:
        '200':
          description: Playlist created
    get:
      tags:
        - song
      summary: Get the details of playlists 
      description: Get all the playlists of a user
      parameters:
        - name: user_id
          in: query
          description: user_id of user's playlist
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  playlists:
                    type: array
                    items:
                      type: object
                      properties:
                        playlist_id:
                          type: integer
                          example: 1
                        playlist_name:
                          type: string
                          example: yuvan hits
                        user_id: 
                          type: integer
                          example: 1
    put:
      tags:
        - song
      summary: Update playlist name
      description: Update name of the existing playlist
      requestBody:
        description: Playlist details
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                playlist_name:
                  type: string
                  example: rahman melodies
                new_playlist_name:
                  type: string
                  example: rahman classics
      responses:
        '200':
          description: Playlist name updated

    delete:
      tags:
        - song
      summary: Delete a playlist of a user
      description: Delete a playlist of a user
      requestBody:
        description: Playlist details to be deleted
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                playlist_name:
                  type: string
                  example: rahman melodies
      responses:
        '200':
          description: Playlist deleted

  /songs/playlistsongs:
    post:
      tags:
        - song
      summary: Add songs to a playlist
      description: Adding songs to a exisiting playlist, if playlist doesn't exist creates a playlist and then adds the songs.
      requestBody:
        description: Song details
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                playlist_name:
                  type: string
                  example: yuvan hits
                song_ids:
                  type: array
                  items: 
                    type: integer
                  example: [1,2]
      responses:
        '200':
          description: successful operation
    get:
      tags:
        - song
      summary: Get songs in a playlist
      description: Fetching songs from a playlist
      parameters:
        - name: user_id
          in: query
          description: user_id of requesting user
          required: true
          schema:
            type: string
        - name: playlist_name
          in: query
          description: name of the playlist
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties: 
                  songs:
                    type: array
                    items: 
                      $ref: '#/components/schemas/Song'
    delete:
      tags:
        - song
      summary: Delete songs 
      description: Delete a playlist of a user
      requestBody:
        description: Playlist details to be deleted
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                playlist_name:
                  type: string
                  example: yuvan hits
                song_ids:
                  type: array
                  items: 
                    type: integer
                  example: [1,2]
      responses:
        '200':
          description: Deleted from playlist

  /songs/recommendation:
    post:
      tags:
        - song
      summary: Create a recommendation by a user
      description: creates recommndation recommended by a user to another user
      requestBody:
        description: recommendation details
        content:
          application/json:
            schema:
              type: object
              properties:
                entity:
                  type: string
                  example: album
                entity_id:
                  type: integer
                  example: 1
                by_user_id:
                  type: integer
                  example: 2
                to_user_id:
                  type: integer
                  example: 3
      responses:
        '200':
          description: Recommendation created
    get:
      tags:
        - song
      summary: Get the recommendations of a user
      description: Get all the album, artist, song recommendations for a user
      parameters:
        - name: user_id
          in: query
          description: user_id of requesting user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  recommendations:
                    type: object
                    properties:
                      album:
                        type: array
                        items:
                          properties:
                            by_user:
                              type: integer
                              example: 2
                            details:
                              type: object
                              properties:
                                album_id:
                                  type: integer
                                  example: 1
                                album_name:
                                  type: string
                                  example: asuran
                                artist_id:
                                  type: integer
                                  example: 4
                                artist_name:
                                  type: string
                                  example: gv prakash
                      artist:
                        type: array
                        items:
                          properties:
                            by_user:
                              type: integer
                              example: 2
                            details:
                              type: object
                              properties:
                                artist_id:
                                  type: integer
                                  example: 3
                                artist_name:
                                  type: string
                                  example: rahman
                      genre:
                        type: array
                        items:
                          properties:
                            by_user:
                              type: integer
                              example: 2
                            details:
                              type: object
                              properties:
                                genre_id:
                                  type: integer
                                  example: 4
                                genre_name:
                                  type: string
                                  example: classic
                      song:
                        type: array
                        items:
                          properties:
                            by_user:
                              type: integer
                              example: 2
                            details:
                              $ref: "#/components/schemas/Song"
  
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Song:
      type: object
      properties:
        song_id:
          type: integer
          format: int64
          example: 1
        song_name:
          type: string
          example: hosana
        album_name:
          type: string
          example: vtv
        artist_name:
          type: string
          example: ar rahman
        genre_name:
          type: string
          example: melody
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'