openapi: 3.0.3
info:
  title: Music Player
  description: |-
  version: 1.0.01
  contact:
    email: bsharathofficial@gmail.com

servers:
  - url: http://localhost:5001
tags:
  - name: user
    description: Operations about user
  - name: song
    description: Details about song api's
  - name: playlist
    description: Details about playlist api's
  - name: recommendation
    description: Details about recommendation api's
paths:
  /songs:
    get:
      tags:
        - song
      summary: Finds song details by song id
      description: find songs
      parameters:
        - name: song_id
          in: query
          description: song id of the song
          required: false
          explode: true
          schema:
            type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        '400':
          description: Invalid status value

  /songs/rating:
    post:
      tags:
        - song
      summary: Add rating for a song
      description: User can rate 1-5 for a song
      requestBody:
        description: Rating object
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                song_id:
                  type: integer
                  example: 1
                rating:
                  type: integer
                  example: 3
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: Song rated succesfully
    get:
      tags:
        - song
      summary: Returns avg rating of a song
      description: Returns avg rating of a song
      parameters:
        - name: song_id
          in: query
          description: song id of the song
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                      type: object
                      properties:
                        rating_info:
                          type: object
                          properties:
                            rating_avg:
                              type: number
                              example: 4.5
                            rating_count:
                              type: integer
                              example: 5
                        song_id:
                          type: integer
                          example: 1
  /songs/search:
    get:
      tags:
        - song
      summary: Search bar
      description: Search a song by title, artist, album, genre
      parameters:
        - name: search_value
          in: query
          description: value for the entity
          required: true
          schema:
            type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  songs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Song'

  /playlists:
    post:
      tags:
        - playlist
      summary: Create a playlist for a user
      description: Create a playlist for a user
      requestBody:
        description: Playlist details
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                playlist_name:
                  type: string
                  example: rahman melodies
                song_ids:
                  type: array
                  items:
                    type: integer
                  example: [1,2,3]
      responses:
        '200':
          description: Playlist created
    get:
      tags:
        - playlist
      summary: Get the details of playlists
      description: Get all the playlists of a user
      parameters:
        - name: user_id
          in: query
          description: user_id of user's playlist
          required: true
          schema:
            type: string
        - name: playlist_name
          in: query
          description: playlist name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  playlists:
                    type: array
                    items:
                      type: object
                      properties:
                        playlist_id:
                          type: integer
                          example: 1
                        playlist_name:
                          type: string
                          example: yuvan hits
                        user_id:
                          type: integer
                          example: 1

    put:
      tags:
        - playlist
      summary: Add or remove songs in a playlist
      description: User can add or delete songs in his playlist
      requestBody:
        description: Song ids to be added or deleted
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                playlist_name:
                  type: string
                  example: rahman melodies
                action:
                  type: string
                  example: add/delete
                song_ids:
                  type: array
                  items:
                    type: integer
                  example: [2,3,4]
      responses:
        '200':
          description: Playlist updated

  /recommendations/user:
    post:
      tags:
        - recommendation
      summary: Create a recommendation by one user to other users
      description: Creates song/album/artist/genre recommendation recommended by a user to other users
      requestBody:
        description: recommendation details
        content:
          application/json:
            schema:
              type: object
              properties:
                entity_type:
                  type: string
                  example: album
                entity_id:
                  type: integer
                  example: 1
                by_user_id:
                  type: integer
                  example: 2
                to_user_id:
                  type: integer
                  example: 3
      responses:
        '200':
          description: Recommendation created
    get:
      tags:
        - recommendation
      summary: Get the recommendations suggested by other users
      description: Get all the album, artist, song recommendations recommended by other users
      parameters:
        - name: user_id
          in: query
          description: user_id of requesting user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  recommendations:
                    type: object
                    properties:
                      album:
                        type: array
                        items:
                          properties:
                            by_user:
                              type: integer
                              example: 2
                            details:
                              type: object
                              properties:
                                album_id:
                                  type: integer
                                  example: 1
                                album_name:
                                  type: string
                                  example: asuran
                                artist_id:
                                  type: integer
                                  example: 4
                                artist_name:
                                  type: string
                                  example: gv prakash
                      artist:
                        type: array
                        items:
                          properties:
                            by_user:
                              type: integer
                              example: 2
                            details:
                              type: object
                              properties:
                                artist_id:
                                  type: integer
                                  example: 3
                                artist_name:
                                  type: string
                                  example: rahman
                      genre:
                        type: array
                        items:
                          properties:
                            by_user:
                              type: integer
                              example: 2
                            details:
                              type: object
                              properties:
                                genre_id:
                                  type: integer
                                  example: 4
                                genre_name:
                                  type: string
                                  example: classic
                      song:
                        type: array
                        items:
                          properties:
                            by_user:
                              type: integer
                              example: 2
                            details:
                              $ref: "#/components/schemas/Song"

  /recommendations/songs:
    get:
      tags:
        - recommendation
      summary: Get songs recommended by the system
      description: System recommends songs by genre, artist and album based on songs in th user's playlist
      parameters:
        - name: user_id
          in: query
          description: user id of the user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Song recommendations
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    message:
                      type: string
                    recommended_album:
                      type: string
                    recommended_artist:
                      type: string
                    recommended_genre:
                      type: string
              examples:
                songs:
                  summary: recommended songs
                  value:
                    message: Songs suggested for the user
                    recommended_album: The Batman
                    recommended_artist: Justin Bieber
                    recommended_genre: Pop
                no playlist:
                  summary: no songs recommended if user has no playlist
                  value:
                    message: No suggestions for the user, as the player has no playlist
                    recommended_album: ""
                    recommended_artist: ""
                    recommended_genre: ""
                no songs:
                  summary: no songs recommended if user has empty playlist
                  value:
                    message: No song suggestions, as the user has no songs in the playlists
                    recommended_album: ""
                    recommended_artist: ""
                    recommended_genre: ""

  /recommendations/playlists:
    get:
      tags:
        - recommendation
      summary: Get playlists recommended by the system.
      description: System recommends random playlists by artist and genre.
      parameters:
        - name: user_id
          in: query
          description: user id of the user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Playlist Recommendation
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    playlists:
                      type: array
                      items:
                        type: object
                        properties:
                          playlist name:
                            type: string
                            example: rahman melodies
                          songs:
                            type: array
                            items:
                              $ref: "#/components/schemas/Song"


  /user/signup:
    post:
      tags:
        - user
      summary: Creates new user profile
      description: Creates new user with username, email_id and password
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                  example: joseph
                email_id:
                  type: string
                  example: joseph@gmail.com
                password:
                  type: string
                  example: joseph

      responses:
        '200':
          description: Successful user creation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created"
        '409':
          description: Duplicate user creation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User already exist"

  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email_id:
                  type: string
                  example: joseph@gmail.com
                password:
                  type: string
                  example: joseph
      responses:
        '200':
          description: User login
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    message:
                      type: string
              examples:
                login:
                  summary: successful login
                  value:
                    message: Login successfull
                repeated login:
                  summary: already logged in
                  value:
                    message: User already logged in
        '400':
          description: Invalid email_id/password supplied
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Bad Request - invalid credentials
  /user/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email_id:
                  type: string
                  example: joseph@gmail.com
                password:
                  type: string
                  example: joseph
      responses:
        '200':
          description: User logout
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    message:
                      type: string
              examples:
                 logout:
                  summary: successful logout
                  value:
                    message: User logged out
                 not logged in:
                  summary: not logged in
                  value:
                    message: User not logged in
        '400':
          description: Invalid email_id/password supplied
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Bad Request - invalid credentials

components:
  schemas:
    Song:
      type: object
      properties:
        song_id:
          type: integer
          format: int64
          example: 1
        song_name:
          type: string
          example: hosana
        album_name:
          type: string
          example: vtv
        artist_name:
          type: string
          example: ar rahman
        genre_name:
          type: string
          example: melody